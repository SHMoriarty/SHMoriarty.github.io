<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬虫学习笔记</title>
      <link href="/2018/12/28/python-pa-chong-xue-xi-bi-ji/"/>
      <url>/2018/12/28/python-pa-chong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>目标:爬取豆瓣Top250数据(这里只是学习)</p><h2 id="创建Scrapy项目"><a href="#创建Scrapy项目" class="headerlink" title="创建Scrapy项目"></a>创建Scrapy项目</h2><p>这里使用的是python的一个爬虫框架<a href="https://github.com/scrapy/scrapy" target="_blank" rel="noopener">scrapy</a></p><p>在cmd里使用下面命令安装scrapy</p><pre class=" language-cmd"><code class="language-cmd">pip install scrapy</code></pre><p>使用下面的命令创建项目</p><pre class=" language-cmd"><code class="language-cmd">scrapy startproject douban</code></pre><h2 id="编写items文件-根据需要爬取的内容来定义字段"><a href="#编写items文件-根据需要爬取的内容来定义字段" class="headerlink" title="编写items文件(根据需要爬取的内容来定义字段)"></a>编写items文件(根据需要爬取的内容来定义字段)</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DoubanItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 电影名称</span>    top <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 电影排名</span>    rating_num <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 电影评分</span>    rating_sum <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 电影评价人数</span>    inq <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 简介</span>    url <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># url</span></code></pre><h2 id="编写爬虫文件"><a href="#编写爬虫文件" class="headerlink" title="编写爬虫文件"></a>编写爬虫文件</h2><p>在douban豆瓣目录下创建基础爬虫类DouBanSpider.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> douban<span class="token punctuation">.</span>items <span class="token keyword">import</span> DoubanItem<span class="token keyword">class</span> <span class="token class-name">DouBanSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'douban'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> str<span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>            url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/top250?start='</span> <span class="token operator">+</span> s            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        movies <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[starts-with(@class, 'item')]"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> DoubanItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movies<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//div/div/a/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movies<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//div/em/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movies<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//div/div/a/span[1]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">'rating_num'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movies<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//div/div/div/span[contains(@class,'rating_num')]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">'rating_sum'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movies<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//div/div/div/span[4]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>            item<span class="token punctuation">[</span><span class="token string">'inq'</span><span class="token punctuation">]</span> <span class="token operator">=</span> movies<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//p[contains(@class,'quote')]/span/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>            <span class="token keyword">yield</span> item</code></pre><p>这里start_requests是请求页面数据，如果不写是根据你定义的start_urls 来进行请求，callback默认是parse方法。parse方法是做html的解析和二次请求，不过这里没有做二次请求。</p><p>具体的html解析这里是使用了xpath选择器，当然还有css选择器，不过这里没有使用到。</p><p>修改settings.py文件设置header</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 设置请求头部，添加url</span>DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;"</span><span class="token punctuation">,</span>    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">}</span></code></pre><p>运行<code>scrapy crawl douban -o douban.csv</code>之后就会发现在douban目录下多了一个douban.csv文件，里面是我们爬出的数据</p><h2 id="存入数据库"><a href="#存入数据库" class="headerlink" title="存入数据库"></a>存入数据库</h2><p>当然我们想要的不是csv文件，一般都是想要将数据存入数据库，scrapy也支持存入数据库。首先安装pymysql执行命令<code>pip install pymysql</code>，然后打开pipelines.py编写代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">DoubanPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'你的host'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'数据库'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        top <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        rating_num <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'rating_num'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        rating_sum <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'rating_sum'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        inq <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'inq'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">'insert into douban250(movie_name,rating_num,rating_sum,top_no,inq,url) VALUES (%s,%s,%s,%s,%s,%s)'</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> rating_num<span class="token punctuation">,</span> rating_sum<span class="token punctuation">,</span> top<span class="token punctuation">,</span> inq<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item</code></pre><p>修改settings.py</p><pre class=" language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'douban.pipelines.DoubanPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>一个爬虫项目可以有多个管道，后面所跟着的数字是指这个管道的优先级。</p><p>然后再运行<code>scrapy crawl douban</code>等待运行完成就会发现数据里有豆瓣Top250的数据了。</p><p>scrapy还可以使用代理ip防止单个ip多次请求ip被ban的情况，这里就不多做赘述了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>view绘制学习笔记</title>
      <link href="/2017/02/21/view-hui-zhi-xue-xi-bi-ji/"/>
      <url>/2017/02/21/view-hui-zhi-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>在Android中View存在有两种形式，一种是单一的View，另一种是可以包含其他View的ViewGroup容器。</p><h2 id="View绘制的整体流程"><a href="#View绘制的整体流程" class="headerlink" title="View绘制的整体流程"></a>View绘制的整体流程</h2><p>启动一个Activity时，Android系统会根据Activity的布局对它进行绘制。绘制从根视图的ViewGroup的<code>performTraversals()</code>方法开始，从上到下便利整个视图树，每一个View控件负责绘制自己，而ViewGroup还负责通知自己的子View进行绘制。视图的绘制分为三个步骤：测量（Measure）、布局（Layout）、绘制（Draw）。</p><h2 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h2><p>MeasureSpec表示的是一个32的整型值，它的高2位表示的是测量模式，低30位表示某种测量模式下的规格大小。MeasureSepc是View类的一个静态内部类，用来表明如何测量这个View。测量模式有三种：UNSPECIFIED、EXACTLY、AT_MOST。</p><ul><li>UNSPECIFIED：不指定测量模式，父视图没有限制子视图的大小，子视图可以是想要的任何尺寸，通常用于系统内部，应用开发很少用到。</li><li>EXACTLY：精确测量模式，当该视图的layout_width或者layout_height指定为具体数值或者mach_parent时生效，表示父视图已经决定了子视图的精确大小，这种模式下View的测量值就是SpecSize的值。</li><li>AT_MOST：最大值模式，当该视图的layout_width或者layout_height指定为wrap_content时生效，此时子视图的尺寸是不可以超过父视图允许的最大尺寸的任何尺寸。</li></ul><p>对DecorView而言，它的MeasureSpec由窗口尺寸和其自身的LayoutParams共同决定；对于普通的View，它的MeasureSpec由父视图的MeasureSpec和其自身的LayoutParams共同决定。</p><h2 id="Measure"><a href="#Measure" class="headerlink" title="Measure"></a>Measure</h2><p>Measure操作是用来计算View的实际大小，页面的测量流程是从performMeasure方法开始。具体的测量操作是分发给ViewGroup的，由ViewGroup在它的measureChild方法中传递给子View，ViewGroup通过遍历自身所有的子View，并逐个调用子View的Measure方法实现测量操作。</p><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p> Layout过程用来确定View在父容器中的布局位置，它是由父容器获取子View的位置参数后，再调用View的Layout方法并将位置参数传入实现的。</p><h2 id="Draw"><a href="#Draw" class="headerlink" title="Draw"></a>Draw</h2><p>Draw操作用来将控件绘制出来，绘制的流程从performDraw方法开始，最终调用到每个View的draw方法绘制每个具体的View，绘制基本上可以分为六个步骤：</p><ul><li>步骤一：绘制View的背景<code>drawBackground(canvas)</code>；</li><li>步骤二：如果需要的话，保存canvas的图层，为fading做准备<code>saveCount = canvas.getSaveCount</code>…<code>canvas.saveLayer(left, top, right, top + length, null, flags);</code></li><li>步骤三：绘制View的内容<code>onDraw(canvas);</code></li><li>步骤四：绘制View的子View<code>diaspatchDraw(canvas)</code>;</li><li>步骤五：如果需要的话，绘制View的fading边缘并回复图层<code>canvas.drawRect(left, top, right, top + length, p)</code>…<code>canvas.restoreToCount(saveCount)</code></li><li>步骤六：绘制View的装饰（例如滚动条）<code>onDrawScrollBars(canvas)</code> </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> view绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android反编译入门</title>
      <link href="/2016/12/16/android-fan-bian-yi-ru-men/"/>
      <url>/2016/12/16/android-fan-bian-yi-ru-men/</url>
      
        <content type="html"><![CDATA[<p>作为Android程序员，看到别人写了炫酷的APP，就会思考如果是我，我会怎么写呢，有时候没有思路，或者实现的略有缺陷，就会很难受，这时候怎么办。当我们对别人开发好的应用感兴趣时，利用反编译，看下别人到底是如何实现的。下面就介绍下我学习到的反编译的方法：</p><h2 id="1-准备工具"><a href="#1-准备工具" class="headerlink" title="1.准备工具"></a>1.准备工具</h2><p>巧妇难为无米之炊，反编译之前我们要将工具准备好。这里我们需要两个工具：</p><ul><li><a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="noopener">apktool</a> （获取app的资源文件）</li><li><a href="https://sourceforge.net/projects/dex2jar/files/" target="_blank" rel="noopener">dex2jar</a> （获取app的源码）</li></ul><h2 id="2-反编译过程"><a href="#2-反编译过程" class="headerlink" title="2.反编译过程"></a>2.反编译过程</h2><p>工具下载完成之后把这两个工具和你要反编译的apk放在一个目录下，我们就可以开始我们的反编译之路啦，哦这里还要说明一下，反编译APK是需要java的环境（这里就不介绍java的环境搭建了，不知道的请你面壁去！！）。</p><h3 id="2-1使用apktool获取apk的资源文件"><a href="#2-1使用apktool获取apk的资源文件" class="headerlink" title="2.1使用apktool获取apk的资源文件"></a>2.1使用apktool获取apk的资源文件</h3><p>打开命令行，进入工具包和apk所在的目录，接下来就是运行apktool.jar 这个jar文件来将apk文件进行反编译，在java中运行可执行的jar包命令是：<code>java -jar jar包名.jar</code></p><p>使用下面的命令运行apktool.jar来反编译apk：</p><p><code>java -jar apktool.jar d -f apk绝对路径 -o apkDex</code>这个命令是将你想想要反编译的apk，将反编译生成的文件放到当前目录下的【apkdex】文件夹下，这个参数可以自己取。如果在反编译过程中没有报错，就表示反编译成功了。这里我遇到了一个问题当我执行命令的时候命令行报错Error: Unable to access jarfile XXX.jar这时候你要看下你是否进入了工具包所在的目录下或者你运行的jar的文件名是否有打错。反编译成功，会在当前目录下生成一个apkDex文件夹，打开文件夹就会看到反编译生成的文件</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8v9hzr44cj30lk05ht90.jpg" alt="反编译后生产的文件"></p><p>打开res文件夹就能看到，apk里的资源文件了</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8v9jpbl9zj30dw0pognu.jpg" alt="es目录"></p><p>想要看查看哪个xml就用文本编辑器打开看到 ，到这里就是使用apktool将这个工具反编译得到图片，xml等资源文件的过程。</p><h3 id="2-2使用dex2jar反编译apk得到java源代码"><a href="#2-2使用dex2jar反编译apk得到java源代码" class="headerlink" title="2.2使用dex2jar反编译apk得到java源代码"></a>2.2使用dex2jar反编译apk得到java源代码</h3><p>将你要反编译的apk后缀名改成zip，并解压，取出其中的classes.dex文件（这个文件就是java文件编译在通过dx工具打包生成的）。下载的dex2jar也解压，并把apk的classes.dex取出来放进去。<br><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8v9ksadnpj30iu0flq4j.jpg" alt="dex文件"></p><p>在命令行进到这个目录下，输入<code>d2j-dex2jar classes.dex</code>执行过程中没有出错就表示反编译成功，在当前目录下就可以看到生成的classes.dex2jar.jar文件这就是java的源代码了，之后就可以使用<a href="http://jd.benow.ca/" target="_blank" rel="noopener">jd-gui</a>查看源代码了，但是混淆过得class，反编译的效果不是那么理想了。不过我么也能通过修改xml利用apktool重新生成apk，来对apk进行汉化或者去广告。这个就不在本文不细说了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
